const
  cluster = require('cluster')
  assert = require('assert')

argv = process.argv.slice(2)
worker_count = parseInt(argv.shift())
script = argv.shift()

cluster.setupMaster do
  exec: script
  args: argv

workers = (cluster.fork() for i from 0 til worker_count)
new_workers = []
waiting_for = null

process.on(\SIGUSR1, deployStart)
process.on(\SIGUSR2, deployAbort)

event \Bootup

!function event (name)
  process.send do
    new_count: new_workers.length
    old_count: workers.length
    event: name

!function onNewWorkerOnline
  event \NewOnline
  old_worker = workers.shift()
  old_worker.send \shutdown
  waiting_for := \old
  old_worker.once \exit, !->
    event \OldExit
    if workers.length is 0
      assert new_workers.length is worker_count
      waiting_for := null
      [workers, new_workers] = [new_workers, workers]
      event \Ready
    else
      startNewWorker()

!function startNewWorker
  # replace workers one at a time
  event \SpawningNew
  new_workers.push new_worker = cluster.fork()
  waiting_for := \new
  new_worker.once \online, onNewWorkerOnline

!function deployStart
  if waiting_for?
    event \ErrorDeployInProgress
  else
    startNewWorker()

!function deployAbort
  switch waiting_for
    case \new
      ...
    case \old
      ...
    default
      event \ErrorNoDeployInProgress
