const
  cluster = require('cluster')
  assert = require('assert')
  async = require('async')

argv = process.argv.slice(2)
worker_count = parseInt(argv.shift())
script = argv.shift()

cluster.setupMaster do
  exec: script
  args: argv

# workers move from here to dying_workers when we ask them to 'shutdown'
workers = (cluster.fork() for i from 0 til worker_count)
# workers go here until they all have emitted 'online'
new_workers = []
# workers in here have been asked to 'shutdown'
dying_workers = []
waiting_for = null

process.on \message, !(message) ->
  switch message
    case \NaughtDeploy then deployStart()
    case \NaughtDeployAbort then deployAbort()
    default then event \UnrecognizedMessage

event \Bootup

!function event (name)
  process.send do
    new_count: new_workers.length
    old_count: workers.length
    dying_count: dying_workers.length
    event: name

!function spawnNew (cb)
  assert new_workers.length < worker_count
  event \SpawnNew
  new_workers.push new_worker = cluster.fork()
  new_worker.once \message, !(message) ->
    if message is \online
      event \NewOnline
      cb()

!function shutdownOld (cb)
  assert workers.length > 0
  event \ShutdownOld
  pos = dying_workers.length
  dying_workers.push dying_worker = workers.shift()
  dying_worker.disconnect()
  dying_worker.send \shutdown
  dying_worker.once \exit, !->
    event \OldExit
    dying_workers[pos] = null
    cb()

!function deployStart
  if waiting_for?
    event \ErrorDeployInProgress
    return

  waiting_for := \new
  async.parallel (spawnNew for i from 0 til worker_count), !->
    assert new_workers.length is worker_count
    waiting_for := \old
    async.parallel (shutdownOld for i from 0 til worker_count), !->
      assert workers.length is 0
      event \Ready
      waiting_for := null
      [workers, new_workers] := [new_workers, workers]
      dying_workers := []

!function destroyNew (cb)
  event \DestroyNew
  new_worker = new_workers.shift()
  new_worker.once \exit, cb
  new_worker.destroy()

!function deployAbort
  switch waiting_for
    case \new
      async.parallel (destroyNew for i from 0 til new_workers.length), !->
        event \Ready
        waiting_for := null
    case \old
      for dying_worker of dying_workers
        if dying_worker?
          event \DestroyOld
          dying_worker.destroy()
    default
      event \ErrorNoDeployInProgress
