const
  fs = require('fs')
  fse = require('fs-extra')
  path = require('path')
  {EventEmitter} = require('events')
  zlib = require('zlib')

# cb(err, log)
#   log.write(str, cb)
#     cb(err)
export !function create (file_path, max_size, cb)
  createStream file_path, !(err, stream, size) ->
    return cb(err) if err

    pending = null
    log = new EventEmitter()
    stream.on \error, (error) -> log.emit \error, error
    log.write = !(str) ->
      flushed = stream.write(str)
      size += str.length
      if pending is \flush
        if flushed
          pending := null
        else
          stream.once \drain, !-> pending := null
      if pending!? and size >= max_size
        pending := \rename
        archive_name = archiveName(file_path)
        fs.rename file_path, archive_name, !(err) ->
          return log.emit('error', err) if err
          createStream file_path, !(err, new_stream, new_size) ->
            return log.emit('error', err) if err
            stream.once \close, !->
              gzip = zlib.createGzip()
              inp = fs.createReadStream(archive_name)
              out = fs.createWriteStream(archive_name + ".gz")
              inp.pipe(gzip).pipe(out)
              out.once \close, !->
                fs.unlink archive_name, !(err) ->
                  return log.emit('error', err) if err
            stream.end()
            new_stream.on \error, (error) -> log.emit \error, error
            size := new_size
            stream := new_stream
            pending := \flush
    cb null, log

!function getFileSize (file_path, cb)
  fs.stat file_path, !(err, stats) ->
    if err
      if err.code is \ENOENT
        return cb(null, 0)
      else
        return cb(err)
    else
      cb(null, stats.size)

!function createStream (file_path, cb)
  fse.mkdir path.dirname(file_path), !(err) ->
    return cb(err) if err
    getFileSize file_path, !(err, size) ->
      return cb(err) if err
      stream = fs.createWriteStream file_path, flags: 'a'
      cb(null, stream, size)

function archiveName(file_path)
  dirname = path.dirname(file_path)
  extname = path.extname(file_path)
  basename = path.basename(file_path, extname)
  timestamp = (new Date()).getTime()
  path.join(dirname, "#{basename}-#{timestamp}#{extname}")
