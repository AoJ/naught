const
  fs = require('fs')
  path = require('path')
  {spawn} = require('child_process')

argv = process.argv.slice(2)
worker_count = argv.shift()
pidfile = argv.shift()
log_naught = argv.shift()
log_stderr = argv.shift()
log_stdout = argv.shift()
script = argv.shift()

log_naught = fs.createWriteStream log_naught,
  flags: 'a'
  encoding: 'utf8'
log_stderr = fs.createWriteStream log_stderr,
  flags: 'a'
  encoding: 'utf8'
log_stdout = fs.createWriteStream log_stdout,
  flags: 'a'
  encoding: 'utf8'

!function log (str)
  log_naught.write str
  process.stdout.write str

child = spawn(process.execPath, [
  path.join(__dirname, "master.js"),
  worker_count,
  script,
].concat(argv), {
  env: process.env
  stdio: [process.stdin, 'pipe', 'pipe', 'ipc']
  cwd: process.cwd()
})

child.on \message, !(message) ->
  log_naught.write("event: #{message.event}, old: #{message.old_count}, new: #{message.new_count}\n")

child.stdout.pipe(log_stdout)
child.stderr.pipe(log_stderr)
fs.writeFile pidfile, child.pid.toString(), \utf8, !(err) ->
  if err then log "Error: Unable to write pidfile to #{pidfile}.\n#{err.stack}\n"
